openapi: '3.0.2'
info:
  title: Slex Public Spot API
  description: |-
    OpenAPI Specifications for the Slex Public Spot API
  version: '1.0'

servers:
  - url: https://api.slex.io

tags:
  - name: Market
    description: Market Data
  - name: Trade
    description: Account/Trade
paths:
  /api/v3/ping:
    get:
      summary: Test Connectivity
      description: |-
        Test connectivity to the Rest API.

        Weight(IP): 1
      tags:
        - Market
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/v3/time:
    get:
      summary: Check Server Time
      description: |-
        Test connectivity to the Rest API and get the current server time.

        Weight(IP): 1
      tags:
        - Market
      responses:
        '200':
          description: Binance server UTC timestamp
          content:
            application/json:
              schema:
                type: object
                properties:
                  serverTime:
                    type: integer
                    format: int64
                    example: 1499827319559
                required:
                  - serverTime
  /api/v3/exchangeInfo:
    get:
      summary: Exchange Information
      description: |-
        Current exchange trading rules and symbol information

        - If any symbol provided in either symbol or symbols do not exist, the endpoint will throw an error.

        Weight(IP): 10
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/optionalSymbol'
        - $ref: '#/components/parameters/arraySymbols'
      responses:
        '200':
          description: Current exchange trading rules and symbol information
          content:
            application/json:
              schema:
                type: object
                properties:
                  timezone:
                    type: string
                    example: UTC
                  serverTime:
                    type: integer
                    format: int64
                    example: 1592882214236
                  rateLimits:
                    type: array
                    items:
                      type: object
                      properties:
                        rateLimitType:
                          type: string
                          example: "REQUEST_WEIGHT"
                        interval:
                          type: string
                          example: "MINUTE"
                        intervalNum:
                          type: integer
                          format: int32
                          example: 1
                        limit:
                          type: integer
                          format: int32
                          example: 1200
                      required:
                        - rateLimitType
                        - interval
                        - intervalNum
                        - limit
                  exchangeFilters:
                    type: array
                    items:
                      type: object
                  symbols:
                    type: array
                    items:
                      type: object
                      properties:
                        symbol:
                          type: string
                          example: "ETHBTC"
                        status:
                          type: string
                          example: "TRADING"
                        baseAsset:
                          type: string
                          example: "ETH"
                        baseAssetPrecision:
                          type: integer
                          format: int32
                          example: 8
                        quoteAsset:
                          type: string
                          example: "BTC"
                        quoteAssetPrecision:
                          type: integer
                          format: int32
                          example: 8
                        baseCommissionPrecision:
                          type: integer
                          format: int32
                          example: 8
                        quoteCommissionPrecision:
                          type: integer
                          format: int32
                          example: 8
                        orderTypes:
                          type: array
                          items:
                            type: string
                            example: "LIMIT"
                        icebergAllowed:
                          type: boolean
                        ocoAllowed:
                          type: boolean
                        quoteOrderQtyMarketAllowed:
                          type: boolean
                        allowTrailingStop:
                          type: boolean
                          example: false
                        isSpotTradingAllowed:
                          type: boolean
                        isMarginTradingAllowed:
                          type: boolean
                        filters:
                          type: array
                          items:
                            type: object
                            properties:
                              filterType:
                                type: string
                                example: "PRICE_FILTER"
                              minPrice:
                                type: string
                                example: "0.00000100"
                              maxPrice:
                                type: string
                                example: "100000.00000000"
                              tickSize:
                                type: string
                                example: "0.00000100"
                            required:
                              - filterType
                              - minPrice
                              - maxPrice
                              - tickSize
                        permissions:
                          type: array
                          items:
                            type: string
                            example: "SPOT"
                      required:
                        - symbol
                        - status
                        - baseAsset
                        - baseAssetPrecision
                        - quoteAsset
                        - quoteAssetPrecision
                        - baseCommissionPrecision
                        - quoteCommissionPrecision
                        - orderTypes
                        - icebergAllowed
                        - ocoAllowed
                        - quoteOrderQtyMarketAllowed
                        - allowTrailingStop
                        - isSpotTradingAllowed
                        - isMarginTradingAllowed
                        - filters
                        - permissions
                required:
                  - timezone
                  - serverTime
                  - rateLimits
                  - exchangeFilters
                  - symbols
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/depth:
    get:
      summary: Order Book
      description: |-
        | Limit               | Weight(IP)  |
        |---------------------|-------------|
        | 1-100               | 1           |
        | 101-500             | 5           |
        | 501-1000            | 10          |
        | 1001-5000           | 50          |
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/symbol'
        - name: limit
          in: query
          description: If limit > 5000, then the response will truncate to 5000
          schema:
            type: integer
            format: int32
            default: 100
            maximum: 5000
            example: 100
      responses:
        '200':
          description: Order book
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastUpdateId:
                    type: integer
                    format: int64
                  bids:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                        minItems: 2
                        maxItems: 2
                  asks:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                        minItems: 2
                        maxItems: 2
                required:
                  - lastUpdateId
                  - bids
                  - asks
              example:
                lastUpdateId: 1027024
                bids:
                  -
                    - "4.00000000"
                    - "431.00000000"
                asks:
                  -
                    - "4.00000200"
                    - "12.00000000"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/trades:
    get:
      summary: Recent Trades List
      description: |-
        Get recent trades.

        Weight(IP): 1
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Trade list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trade'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/historicalTrades:
    get:
      summary: Old Trade Lookup (MARKET_DATA)
      description: |-
        Get older market trades.

        Weight(IP): 5
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/fromId'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Trade list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trade'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/ticker/24hr:
    get:
      summary: 24hr Ticker Price Change Statistics
      description: |-
        24 hour rolling window price change statistics. Careful when accessing this with no symbol.

        - If the symbol is not sent, tickers for all symbols will be returned in an array.

        Weight(IP):
        - `1` for a single symbol;
        - `40` when the symbol parameter is omitted;

      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/optionalSymbol'
        - $ref: '#/components/parameters/arraySymbols'
        - name: type
          in: query
          description: |-
            Supported values: FULL or MINI.
            If none provided, the default is FULL
          schema:
            type: string
      responses:
        '200':
          description: 24hr ticker
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ticker'
                  - $ref: '#/components/schemas/tickerList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/ticker/price:
    get:
      summary: Symbol Price Ticker
      description: |-
        Latest price for a symbol or symbols.

        - If the symbol is not sent, prices for all symbols will be returned in an array.

        Weight(IP):
        - `1` for a single symbol;
        - `2` when the symbol parameter is omitted;
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/optionalSymbol'
        - $ref: '#/components/parameters/arraySymbols'
      responses:
        '200':
          description: Price ticker
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/priceTicker'
                  - $ref: '#/components/schemas/priceTickerList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/ticker/bookTicker:
    get:
      summary: Symbol Order Book Ticker
      description: |-
        Best price/qty on the order book for a symbol or symbols.

        - If the symbol is not sent, bookTickers for all symbols will be returned in an array.

        Weight(IP):
        - `1` for a single symbol;
        - `2` when the symbol parameter is omitted;
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/optionalSymbol'
        - $ref: '#/components/parameters/arraySymbols'
      responses:
        '200':
          description: Order book ticker
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bookTicker'
                  - $ref: '#/components/schemas/bookTickerList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/order/test:
    post:
      summary: Test New Order (TRADE)
      description: |-
        Test new order creation and signature/recvWindow long.
        Creates and validates a new order but does not send it into the matching engine.

        Weight(IP): 1
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/side'
        - $ref: '#/components/parameters/orderType'
        - $ref: '#/components/parameters/timeInForce'
        - $ref: '#/components/parameters/optionalQuantity'
        - $ref: '#/components/parameters/quoteOrderQty'
        - $ref: '#/components/parameters/optionalPrice'
        - $ref: '#/components/parameters/newClientOrderId'
        - $ref: '#/components/parameters/strategyId'
        - $ref: '#/components/parameters/strategyType'
        - $ref: '#/components/parameters/stopPrice'
        - $ref: '#/components/parameters/optionalTrailingDelta'
        - $ref: '#/components/parameters/icebergQty'
        - $ref: '#/components/parameters/newOrderRespType'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/order:
    get:
      summary: Query Order (USER_DATA)
      description: |-
        Check an order's status.

        - Either `orderId` or `origClientOrderId` must be sent.
        - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.

        Weight(IP): 2
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/orderId'
        - $ref: '#/components/parameters/origClientOrderId'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: New Order (TRADE)
      description: |-
        Send in a new order.

        - `LIMIT_MAKER` are `LIMIT` orders that will be rejected if they would immediately match and trade as a taker.
        - `STOP_LOSS` and `TAKE_PROFIT` will execute a `MARKET` order when the `stopPrice` is reached.
        - Any `LIMIT` or `LIMIT_MAKER` type order can be made an iceberg order by sending an `icebergQty`.
        - Any order with an `icebergQty` MUST have `timeInForce` set to `GTC`.
        - `MARKET` orders using `quantity` specifies how much a user wants to buy or sell based on the market price.
        - `MARKET` orders using `quoteOrderQty` specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and `quoteOrderQty`.
        - `MARKET` orders using `quoteOrderQty` will not break `LOT_SIZE` filter rules; the order will execute a quantity that will have the notional value as close as possible to `quoteOrderQty`.
        - same `newClientOrderId` can be accepted only when the previous one is filled, otherwise the order will be rejected.

        Trigger order price rules against market price for both `MARKET` and `LIMIT` versions:

        - Price above market price: `STOP_LOSS` `BUY`, `TAKE_PROFIT` `SELL`
        - Price below market price: `STOP_LOSS` `SELL`, `TAKE_PROFIT` `BUY`


        Weight(IP): 1
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/side'
        - $ref: '#/components/parameters/orderType'
        - $ref: '#/components/parameters/timeInForce'
        - $ref: '#/components/parameters/optionalQuantity'
        - $ref: '#/components/parameters/quoteOrderQty'
        - $ref: '#/components/parameters/optionalPrice'
        - $ref: '#/components/parameters/newClientOrderId'
        - $ref: '#/components/parameters/strategyId'
        - $ref: '#/components/parameters/strategyType'
        - $ref: '#/components/parameters/stopPrice'
        - $ref: '#/components/parameters/optionalTrailingDelta'
        - $ref: '#/components/parameters/icebergQty'
        - $ref: '#/components/parameters/newOrderRespType'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Order result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/orderResponseAck'
                  - $ref: '#/components/schemas/orderResponseResult'
                  - $ref: '#/components/schemas/orderResponseFull'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: Cancel Order (TRADE)
      description: |-
        Cancel an active order.

        Either `orderId` or `origClientOrderId` must be sent.

        Weight(IP): 1
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/orderId'
        - $ref: '#/components/parameters/origClientOrderId'
        - $ref: '#/components/parameters/newClientOrderId'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Cancelled order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/openOrders:
    get:
      summary: Current Open Orders (USER_DATA)
      description: |-
        Get all open orders on a symbol. Careful when accessing this with no symbol.

        Weight(IP):
        - `3` for a single symbol;
        - `40` when the symbol parameter is omitted;
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/optionalSymbol'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Current open orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: Cancel all Open Orders on a Symbol (TRADE)
      description: |-
        Cancels all active orders on a symbol.
        This includes OCO orders.

        Weight(IP): 1
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Cancelled orders
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/allOrders:
    get:
      summary: All Orders (USER_DATA)
      description: |-
        Get all account orders; active, canceled, or filled..

        - If `orderId` is set, it will get orders >= that `orderId`. Otherwise most recent orders are returned.
        - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
        - If `startTime` and/or `endTime` provided, `orderId` is not required

        Weight(IP): 10
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/orderId'
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Current open orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/myTrades:
    get:
      summary: Account Trade List (USER_DATA)
      description: |-
        Get trades for a specific account and symbol.

        If `fromId` is set, it will get id >= that `fromId`. Otherwise most recent orders are returned.

        Weight(IP): 10
      tags:
        - Trade
      parameters:
        - $ref: '#/components/parameters/symbol'
        - name: orderId
          in: query
          description: This can only be used in combination with symbol.
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/fromId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/recvWindow'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/myTrade'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/userDataStream:
    post:
      summary: Create a ListenKey (USER_STREAM)
      description: |-
        Start a new user data stream.
        The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.

        Weight: 1
      tags:
        - Stream
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Listen key
          content:
            application/json:
              schema:
                type: object
                properties:
                  listenKey:
                    type: string
                    example: "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
                required:
                  - listenKey
    put:
      summary: Ping/Keep-alive a ListenKey (USER_STREAM)
      description: |-
        Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.

        Weight: 1
      tags:
        - Stream
      parameters:
        - $ref: '#/components/parameters/listenKey'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: Close a ListenKey (USER_STREAM)
      description: |-
        Close out a user data stream.

        Weight: 1
      tags:
        - Stream
      parameters:
        - $ref: '#/components/parameters/listenKey'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v3/klines:
    get:
      summary: Kline/Candlestick Data
      description: |-
        Kline/candlestick bars for a symbol.
        Klines are uniquely identified by their open time.
        - If `startTime` and `endTime` are not sent, the most recent klines are returned.
        Weight(IP): 1
      tags:
        - Market
      parameters:
        - $ref: '#/components/parameters/symbol'
        - name: interval
          in: query
          required: true
          description: kline intervals
          schema:
            type: string
            enum: [ 1s,1m,3m,5m,15m,30m,1h,2h,4h,6h,8h,12h,1d,3d,1w,1M ]
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Kline data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    oneOf:
                      - type: integer
                        format: int64
                      - type: string
                    minItems: 12
                    maxItems: 12
                  example:
                    - 1499040000000
                    - "0.01634790"
                    - "0.80000000"
                    - "0.01575800"
                    - "0.01577100"
                    - "148976.11427815"
                    - 1499644799999
                    - "2434.19055334"
                    - 308
                    - "1756.87402397"
                    - "28.46694368"
                    - "17928899.62484339"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /sapi/v3/asset/getUserAsset:
    post:
      summary: User Asset (USER_DATA)
      description: |-
        Get user assets, just for positive data.

        Weight(IP): 5
      tags:
        - Wallet
      parameters:
        - $ref: '#/components/parameters/optionalAsset'
        - $ref: '#/components/parameters/optionalAssets'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User assets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    asset:
                      type: string
                      example: AVAX
                    free:
                      type: string
                      example: '1'
                    locked:
                      type: string
                      example: '0'
                    freeze:
                      type: string
                      example: '0'
                    withdrawing:
                      type: string
                      example: '0'
                    ipoable:
                      type: string
                      example: '0'
                    btcValuation:
                      type: string
                      example: '0'
                  required:
                    - asset
                    - free
                    - locked
                    - freeze
                    - withdrawing
                    - ipoable
                    - btcValuation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  parameters:
    asset:
      name: asset
      in: query
      required: true
      schema:
        type: string
        example: 'BTC'
    amount:
      name: amount
      in: query
      required: true
      schema:
        type: number
        format: double
        example: '1.01'
    side:
      name: side
      in: query
      required: true
      schema:
        type: string
        enum: ['SELL', 'BUY']
        example: 'SELL'
    optionalSide:
      name: side
      in: query
      schema:
        type: string
        enum: ['SELL', 'BUY']
        example: 'SELL'
    symbol:
      name: symbol
      in: query
      required: true
      description: Trading symbol, e.g. BNBUSDT
      schema:
        type: string
        example: 'BNBUSDT'
    optionalSymbol:
      name: symbol
      in: query
      description: Trading symbol, e.g. BNBUSDT
      schema:
        type: string
        example: 'BNBUSDT'
    optionalAsset:
      name: asset
      in: query
      schema:
        type: string
        example: 'BNB'
    optionalAssets:
      name: assets
      in: query
      description: assets
      schema:
        type: string
        example: '["BTCUSDT","BNBUSDT","ADAUSDT"]'
    limit:
      name: limit
      in: query
      description: Default 500; max 1000.
      schema:
        type: integer
        format: int32
        example: 500
    listenKey:
      name: listenKey
      in: query
      description: User websocket listen key
      schema:
        type: string
        example: 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1'
    fromId:
      name: fromId
      in: query
      description: Trade id to fetch from. Default gets most recent trades.
      schema:
        type: integer
        format: int64
    orderId:
      name: orderId
      in: query
      description: Order id
      schema:
        type: integer
        format: int64
    orderListId:
      name: orderListId
      in: query
      description: Order list id
      schema:
        type: integer
        format: int64
    origClientOrderId:
      name: origClientOrderId
      in: query
      description: Order id from client
      schema:
        type: string
    listClientOrderId:
      name: listClientOrderId
      in: query
      description: A unique Id for the entire orderList
      schema:
        type: string
    newClientOrderId:
      name: newClientOrderId
      in: query
      description: Used to uniquely identify this cancel. Automatically generated by default
      schema:
        type: string
    strategyId:
      name: strategyId
      in: query
      schema:
        type: integer
        format: int64
        description: do not use
    strategyType:
      name: strategyType
      in: query
      description: "DO NOT USE The value cannot be less than 1000000."
      schema:
        type: integer
        format: int64
    newOrderRespType:
      name: newOrderRespType
      in: query
      description: Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
      schema:
        type: string
        enum: [ACK,RESULT,FULL]
    startTime:
      name: startTime
      in: query
      description: UTC timestamp in ms
      schema:
        type: integer
        format: int64
    endTime:
      name: endTime
      in: query
      description: UTC timestamp in ms
      schema:
        type: integer
        format: int64
    startTimeReq:
      name: startTime
      in: query
      description: UTC timestamp in ms
      required: true
      schema:
        type: integer
        format: int64
    endTimeReq:
      name: endTime
      in: query
      description: UTC timestamp in ms
      required: true
      schema:
        type: integer
        format: int64
    price:
      name: price
      in: query
      required: true
      description: Order price
      schema:
        type: number
        format: double
    optionalPrice:
      name: price
      in: query
      description: Order price
      schema:
        type: number
        format: double
    quantity:
      name: quantity
      in: query
      required: true
      schema:
        type: number
        format: double
    optionalQuantity:
      name: quantity
      in: query
      description: Order quantity
      schema:
        type: number
        format: double
    recvWindow:
      name: recvWindow
      in: query
      description: The value cannot be greater than 60000
      schema:
        type: integer
        format: int64
        example: 5000
    timestamp:
      name: timestamp
      in: query
      required: true
      description: UTC timestamp in ms
      schema:
        type: integer
        format: int64
    timeInForce:
      name: timeInForce
      in: query
      description: Order time in force
      schema:
        type: string
        enum: [GTC,IOC,FOK]
    type:
      name: type
      in: query
      required: true
      schema:
        type: integer
        format: int64
    orderType:
      name: type
      in: query
      required: true
      description: Order type
      schema:
        type: string
        enum: [LIMIT,MARKET] #,STOP_LOSS,STOP_LOSS_LIMIT,TAKE_PROFIT,TAKE_PROFIT_LIMIT,LIMIT_MAKER]
    signature:
      name: signature
      in: query
      required: true
      description: Signature
      schema:
        type: string
    stopPrice:
      name: stopPrice
      in: query
      description: Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
      schema:
        type: number
        format: double
        example: 20.01

    symbols:
      name: symbols
      in: query
      description: Max 5 symbols can be sent; separated by ','
      schema:
        type: string
        example: 'BTCUSDT,BNBUSDT,ADAUSDT'
    arraySymbols:
      name: symbols
      in: query
      schema:
        type: string
        example: '["BTCUSDT","BNBBTC"]'

    quoteOrderQty:
      name: quoteOrderQty
      in: query
      description: Quote quantity
      schema:
        type: number
        format: double
    icebergQty:
      name: icebergQty
      in: query
      description: DO NOT USE Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
      schema:
        type: number
        format: double

    userName:
      name: userName
      in: query
      required: true
      description: Mining Account
      schema:
        type: string
    algo:
      name: algo
      in: query
      required: true
      description: Algorithm(sha256)
      schema:
        type: string

    startDate:
      name: startDate
      in: query
      description: Search date, millisecond timestamp, while empty query all
      schema:
        type: string
    endDate:
      name: endDate
      in: query
      description: Search date, millisecond timestamp, while empty query all
      schema:
        type: string
    quoteAsset:
      name: quoteAsset
      in: query
      required: true
      schema:
        type: string
        example: 'USDT'
    baseAsset:
      name: baseAsset
      in: query
      required: true
      schema:
        type: string
        example: 'BUSD'
    quoteQty:
      name: quoteQty
      in: query
      required: true
      schema:
        type: number
        format: double

    limitClientOrderId:
      name: limitClientOrderId
      in: query
      description: 'A unique Id for the limit order'
      schema:
        type: string
    limitStrategyId:
      name: limitStrategyId
      in: query
      schema:
        type: integer
        format: int64
    limitStrategyType:
      name: limitStrategyType
      in: query
      description: "The value cannot be less than 1000000."
      schema:
        type: integer
        format: int64
    limitIcebergQty:
      name: limitIcebergQty
      in: query
      schema:
        type: number
        format: double
    stopClientOrderId:
      name: stopClientOrderId
      in: query
      description: 'A unique Id for the stop loss/stop loss limit leg'
      schema:
        type: string
    stopStrategyId:
      name: stopStrategyId
      in: query
      schema:
        type: integer
        format: int64
    stopStrategyType:
      name: stopStrategyType
      in: query
      schema:
        type: integer
        format: int64
    ocoStopPrice:
      name: stopPrice
      in: query
      required: true
      schema:
        type: number
        format: double
    stopLimitPrice:
      name: stopLimitPrice
      in: query
      description: 'If provided, stopLimitTimeInForce is required.'
      schema:
        type: number
        format: double
    stopIcebergQty:
      name: stopIcebergQty
      in: query
      schema:
        type: number
        format: double
    stopLimitTimeInForce:
      name: stopLimitTimeInForce
      in: query
      schema:
        type: string
        enum: [GTC,FOK,IOC]

    subAccountApiKey:
      name: subAccountApiKey
      in: query
      required: true
      schema:
        type: string
    ipRestrict:
      name: ipRestrict
      in: query
      required: true
      description: "true or false"
      schema:
        type: boolean
    thirdParty:
      name: thirdParty
      in: query
      required: false
      description: "true or false"
      schema:
        type: boolean
    thirdPartyName:
      name: thirdPartyName
      in: query
      required: false
      description: "third party IP list name"
      schema:
        type: string
    ipAddress:
      name: ipAddress
      in: query
      required: true
      description: "Can be added in batches, separated by commas"
      schema:
        type: string
    optionalIpAddress:
      name: ipAddress
      in: query
      description: "Can be added in batches, separated by commas"
      schema:
        type: string
    vipLevel:
      name: vipLevel
      in: query
      description: Defaults to user's vip level
      schema:
        type: integer
        format: int32
        example: 1
    clientTranId:
      name: clientTranId
      in: query
      schema:
        type: string
    bswapClaimType:
      name: type
      in: query
      description: '0: Swap rewards, 1: Liquidity rewards, default to 0'
      schema:
        type: integer
        format: int32
        example: 0
    optionalTrailingDelta:
      name: trailingDelta
      in: query
      description: DO NOT USE Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
      schema:
        type: number
        format: double

  schemas:
    account:
      type: object
      properties:
        makerCommission:
          type: integer
          format: int64
          example: 15
        takerCommission:
          type: integer
          format: int64
          example: 15
        buyerCommission:
          type: integer
          format: int64
          example: 0
        sellerCommission:
          type: integer
          format: int64
          example: 0
        canTrade:
          type: boolean
        canWithdraw:
          type: boolean
        canDeposit:
          type: boolean
        brokered:
          type: boolean
        updateTime:
          type: integer
          format: int64
          example: 123456789
        accountType:
          type: string
          example: "SPOT"
        balances:
          type: array
          items:
            type: object
            properties:
              asset:
                type: string
                example: "BTC"
              free:
                type: string
                example: "4723846.89208129"
              locked:
                type: string
                example: "0.00000000"
            required:
              - asset
              - free
              - locked
      required:
        - makerCommission
        - takerCommission
        - buyerCommission
        - sellerCommission
        - canTrade
        - canWithdraw
        - canDeposit
        - brokered
        - updateTime
        - accountType
        - balances
    order:
      type: object
      properties:
        symbol:
          type: string
          example: "BNBBTC"
        origClientOrderId:
          type: string
          example: "msXkySR3u5uYwpvRMFsi3u"
        orderId:
          type: integer
          format: int64
          example: 28
        orderListId:
          type: integer
          format: int64
          description: Unless OCO, value will be -1
          example: -1
        clientOrderId:
          type: string
          example: "6gCrw2kRUAF9CvJDGP16IP"
        price:
          type: string
          example: "1.00000000"
        origQty:
          type: string
          example: "10.00000000"
        executedQty:
          type: string
          example: "10.00000000"
        cummulativeQuoteQty:
          type: string
          example: "10.00000000"
        status:
          type: string
          example: "FILLED"
        timeInForce:
          type: string
          example: "GTC"
        type:
          type: string
          example: "LIMIT"
        side:
          type: string
          example: "SELL"
      required:
        - symbol
        - origClientOrderId
        - orderId
        - orderListId
        - clientOrderId
        - price
        - origQty
        - executedQty
        - cummulativeQuoteQty
        - status
        - timeInForce
        - type
        - side
    orderDetails:
      type: object
      properties:
        symbol:
          type: string
          example: "LTCBTC"
        orderId:
          type: integer
          format: int64
          example: 1
        orderListId:
          type: integer
          format: int64
          description: Unless OCO, value will be -1
          example: -1
        clientOrderId:
          type: string
          example: "myOrder1"
        price:
          type: string
          example: "0.1"
        origQty:
          type: string
          example: "1.0"
        executedQty:
          type: string
          example: "0.0"
        cummulativeQuoteQty:
          type: string
          example: "0.0"
        status:
          type: string
          example: "NEW"
        timeInForce:
          type: string
          example: "GTC"
        type:
          type: string
          example: "LIMIT"
        side:
          type: string
          example: "BUY"
        stopPrice:
          type: string
          example: "0.0"
        icebergQty:
          type: string
          example: "0.0"
        time:
          type: integer
          format: int64
          example: 1499827319559
        updateTime:
          type: integer
          format: int64
          example: 1499827319559
        isWorking:
          type: boolean
        origQuoteOrderQty:
          type: string
          example: "0.00000000"
      required:
        - symbol
        - orderId
        - orderListId
        - clientOrderId
        - price
        - origQty
        - executedQty
        - cummulativeQuoteQty
        - status
        - timeInForce
        - type
        - side
        - stopPrice
        - icebergQty
        - time
        - updateTime
        - isWorking
        - origQuoteOrderQty
    orderResponseAck:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSDT"
        orderId:
          type: integer
          format: int64
          example: 28
        orderListId:
          type: integer
          format: int64
          example: -1
        clientOrderId:
          type: string
          example: "6gCrw2kRUAF9CvJDGP16IP"
        transactTime:
          type: integer
          format: int64
          example: 1507725176595
      required:
        - symbol
        - orderId
        - orderListId
        - clientOrderId
        - transactTime
    orderResponseResult:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSDT"
        orderId:
          type: integer
          format: int64
          example: 28
        orderListId:
          type: integer
          format: int64
          example: -1
        clientOrderId:
          type: string
          example: "6gCrw2kRUAF9CvJDGP16IP"
        transactTime:
          type: integer
          format: int64
          example: 1507725176595
        price:
          type: string
          example: "0.00000000"
        origQty:
          type: string
          example: "10.00000000"
        executedQty:
          type: string
          example: "10.00000000"
        cummulativeQuoteQty:
          type: string
          example: "10.00000000"
        status:
          type: string
          example: "FILLED"
        timeInForce:
          type: string
          example: "GTC"
        type:
          type: string
          example: "MARKET"
        side:
          type: string
          example: "SELL"
        strategyId:
          type: integer
          format: int64
          example: 1
        strategyType:
          type: integer
          format: int64
          example: 1000000
      required:
        - symbol
        - orderId
        - orderListId
        - clientOrderId
        - transactTime
        - price
        - origQty
        - executedQty
        - cummulativeQuoteQty
        - status
        - timeInForce
        - type
        - side
    orderResponseFull:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSDT"
        orderId:
          type: integer
          format: int64
          example: 28
        orderListId:
          type: integer
          format: int64
          example: -1
        clientOrderId:
          type: string
          example: "6gCrw2kRUAF9CvJDGP16IP"
        transactTime:
          type: integer
          format: int64
          example: 1507725176595
        price:
          type: string
          example: "0.00000000"
        origQty:
          type: string
          example: "10.00000000"
        executedQty:
          type: string
          example: "10.00000000"
        cummulativeQuoteQty:
          type: string
          example: "10.00000000"
        status:
          type: string
          example: "FILLED"
        timeInForce:
          type: string
          example: "GTC"
        type:
          type: string
          example: "MARKET"
        side:
          type: string
          example: "SELL"
        strategyId:
          type: integer
          format: int64
          example: 1
        strategyType:
          type: integer
          format: int64
          example: 1000000
        fills:
          type: array
          items:
            type: object
            properties:
              price:
                type: string
                example: "4000.00000000"
              qty:
                type: string
                example: "1.00000000"
              commission:
                type: string
                example: "4.00000000"
              commissionAsset:
                type: string
                example: "USDT"
            required:
              - price
              - qty
              - commission
              - commissionAsset
      required:
        - symbol
        - orderId
        - orderListId
        - clientOrderId
        - transactTime
        - price
        - origQty
        - executedQty
        - cummulativeQuoteQty
        - status
        - timeInForce
        - type
        - side
        - fills

    bookTickerList:
      type: array
      items:
        $ref: '#/components/schemas/bookTicker'
    bookTicker:
      type: object
      properties:
        symbol:
          type: string
          example: "BNBBTC"
        bidPrice:
          type: string
          example: "16.36240000"
        bidQty:
          type: string
          example: "256.78000000"
        askPrice:
          type: string
          example: "16.36450000"
        askQty:
          type: string
          example: "12.56000000"
      required:
        - symbol
        - bidPrice
        - bidQty
        - askPrice
        - askQty
    priceTickerList:
      type: array
      items:
        $ref: '#/components/schemas/priceTicker'
    priceTicker:
      type: object
      properties:
        symbol:
          type: string
          example: "BNBBTC"
        price:
          type: string
          example: "0.17160000"
      required:
        - symbol
        - price
    tickerList:
      type: array
      items:
        $ref: '#/components/schemas/ticker'
    ticker:
      type: object
      properties:
        symbol:
          type: string
          example: "BNBBTC"
        priceChange:
          type: string
          example: "0.17160000"
        priceChangePercent:
          type: string
          example: "1.060"
        prevClosePrice:
          type: string
          example: "16.35920000"
        lastPrice:
          type: string
          example: "27.84000000"
        bidPrice:
          type: string
          example: "16.34488284"
        bidQty:
          type: string
          example: "16.34488284"
        askPrice:
          type: string
          example: "16.35920000"
        askQty:
          type: string
          example: "25.06000000"
        openPrice:
          type: string
          example: "16.18760000"
        highPrice:
          type: string
          example: "16.55000000"
        lowPrice:
          type: string
          example: "16.16940000"
        volume:
          type: string
          example: "1678279.95000000"
        quoteVolume:
          type: string
          example: "27431289.14792300"
        openTime:
          type: integer
          format: int64
          example: 1592808788637
        closeTime:
          type: integer
          format: int64
          example: 1592895188637
        firstId:
          type: integer
          format: int64
          example: 62683296
        lastId:
          type: integer
          format: int64
          example: 62739253
        count:
          type: integer
          format: int64
          example: 55958
      required:
        - symbol
        - priceChange
        - priceChangePercent
        - prevClosePrice
        - lastPrice
        - bidPrice
        - bidQty
        - askPrice
        - askQty
        - openPrice
        - highPrice
        - lowPrice
        - volume
        - quoteVolume
        - openTime
        - closeTime
        - firstId
        - lastId
        - count
    myTrade:
      type: object
      properties:
        symbol:
          type: string
          example: "BNBBTC"
        id:
          type: integer
          format: int64
          description: Trade id
          example: 28457
        orderId:
          type: integer
          format: int64
          example: 100234
        orderListId:
          type: integer
          format: int64
          example:  -1
        price:
          type: string
          description: Price
          example: "4.00000100"
        qty:
          type: string
          description: Amount of base asset
          example: "12.00000000"
        quoteQty:
          type: string
          description: Amount of quote asset
          example: "48.000012"
        commission:
          type: string
          example: "10.10000000"
        commissionAsset:
          type: string
          example: "BNB"
        time:
          type: integer
          format: int64
          description: Trade timestamp
          example: 1499865549590
        isBuyer:
          type: boolean
          example: false
        isMaker:
          type: boolean
          example: false
        isBestMatch:
          type: boolean
        isSelfTrade:
          type: boolean
      required:
        - symbol
        - id
        - orderId
        - orderListId
        - price
        - qty
        - quoteQty
        - commission
        - commissionAsset
        - time
        - isBuyer
        - isMaker
        - isBestMatch
    trade:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: trade id
          example: 345196462
        price:
          type: string
          description: price
          example: "9638.99000000"
        qty:
          type: string
          description: amount of base asset
          example: "0.02077200"
        quoteQty:
          type: string
          description: amount of quote asset
          example: "0.02077200"
        time:
          type: integer
          format: int64
          description: Trade executed timestamp, as same as `T` in the stream
          example: 1592887772684
        isBuyerMaker:
          type: boolean
        isBestMatch:
          type: boolean
      required:
        - id
        - price
        - qty
        - quoteQty
        - time
        - isBuyerMaker
        - isBestMatch
    aggTrade:
      type: object
      properties:
        a:
          type: integer
          format: int64
          description: Aggregate tradeId
          example: 26129
        p:
          type: string
          description: Price
          example: "0.01633102"
        q:
          type: string
          description: Quantity
          example: "4.70443515"
        f:
          type: integer
          format: int64
          description: First tradeId
          example: 27781
        l:
          type: integer
          format: int64
          description: Last tradeId
          example: 27781
        T:
          type: boolean
          description: Timestamp
          example: 1498793709153
        m:
          type: boolean
          description: Was the buyer the maker?
        M:
          type: boolean
          description: Was the trade the best price match?
      required:
        - a
        - p
        - q
        - f
        - l
        - T
        - m
        - M
    error:
      type: object
      properties:
        error:
          type: string
        errorrs:
          type: object
          description: array or object with errors
    depthElement:
      type: object
      properties:
        0:
          type: string
          example: "4.000"
          description: "Price"
        1:
          type: string
          example: "420.000"
          description: "QTY"
    depthElements:
      type: array
      items:
        $ref: '#/components/schemas/depthElement'
  securitySchemes:
    ApiKeyAuth:
      name: X-MBX-APIKEY
      in: header
      description: Slex Public API Key
      type: apiKey
